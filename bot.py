# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API
def get_weather_alternative(city: str):
    try:
        url = f"{ALTERNATIVE_API_URL}{city}?format=j1"
        logger.info(f"Trying alternative API: {url}")
        
        response = requests.get(url)
        response.raise_for_status()
        
        data = response.json()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö wttr.in
        current = data.get('current_condition', [{}])[0]
        location = data.get('nearest_area', [{}])[0].get('areaName', [{}])[0].get('value', city)
        
        temp = current.get('temp_C', 'N/A')
        feels_like = current.get('FeelsLikeC', 'N/A')
        description = current.get('weatherDesc', [{}])[0].get('value', 'N/A')
        humidity = current.get('humidity', 'N/A')
        pressure = current.get('pressure', 'N/A')
        wind_speed = current.get('windspeedKmph', 'N/A')
        
        message = (
            f"üèô –ü–æ–≥–æ–¥–∞ –≤ {location}:\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
            f"‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –∫–º/—á\n"
            f"üß≠ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–±–∞—Ä"
        )
        
        return message
    except Exception as err:
        error_message = f"Error with alternative API: {err}"
        logger.error(error_message)
        return Noneimport os
import logging
import requests
import time
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_TOKEN = "7480018246:AAGZkByeWJBgqjJUZSB-twk8Lmn4-Ugrmu0"  # –í–∞—à —Ç–æ–∫–µ–Ω –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
WEATHER_API_KEY = "0a5e8cb7cca0305ba14f4810ca774ddf"  # –í–∞—à API –∫–ª—é—á OpenWeatherMap
WEATHER_API_URL = "https://api.openweathermap.org/data/2.5/weather"

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API –¥–ª—è –ø–æ–≥–æ–¥—ã (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –±–µ–∑ –∫–ª—é—á–∞)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É."
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –∏ —è —Å–æ–æ–±—â—É —Ç–µ–±–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ."
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
def get_weather(city: str):
    # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞ –∑–∞–ø—Ä–æ—Å–∞ - —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    params = {
        'q': city,
        'units': 'metric',  # –ú–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è)
        'lang': 'ru'  # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
    }
    
    headers = {
        'x-api-key': WEATHER_API_KEY
    }
    
    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º appid –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params['appid'] = WEATHER_API_KEY
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"Sending request to {WEATHER_API_URL} with params: {params}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    time.sleep(1)
    
    try:
        response = requests.get(WEATHER_API_URL, params=params, headers=headers)
        logger.info(f"Response status code: {response.status_code}")
        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 200, –≤—ã–≤–µ–¥–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if response.status_code != 200:
            logger.error(f"Error response: {response.text}")
            
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        weather_data = response.json()
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"Weather data keys: {weather_data.keys()}")
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        city_name = weather_data['name']
        temp = weather_data['main']['temp']
        feels_like = weather_data['main']['feels_like']
        description = weather_data['weather'][0]['description']
        humidity = weather_data['main']['humidity']
        pressure = weather_data['main']['pressure']
        wind_speed = weather_data['wind']['speed']
        
        message = (
            f"üèô –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city_name}:\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C\n"
            f"üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like:.1f}¬∞C\n"
            f"‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
            f"üß≠ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞"
        )
        
        return message
    
    except requests.exceptions.HTTPError as err:
        if response.status_code == 404:
            return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è."
        else:
            error_message = f"HTTP Error: {err}"
            logger.error(error_message)
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –î–µ—Ç–∞–ª–∏: {error_message}"
    
    except Exception as err:
        error_message = f"Error: {err}"
        logger.error(error_message)
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –î–µ—Ç–∞–ª–∏: {error_message}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞)
async def handle_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    city = update.message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." —Å—Ç–∞—Ç—É—Å
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API
    weather_info = get_weather(city)
    
    # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API
    if "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" in weather_info:
        logger.info("Main API failed, trying alternative API")
        alt_weather_info = get_weather_alternative(city)
        if alt_weather_info:
            weather_info = alt_weather_info
    
    await update.message.reply_text(weather_info)

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()